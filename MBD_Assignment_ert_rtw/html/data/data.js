var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"MBD_Assignment","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"C:\\Users\\prathmeshg\\MATLAB\\Projects\\MDB_Assignment\\MBD_Assignment_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'MBD_Assignment'.\r\n *\r\n * Model version                  : 1.28\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Thu Jul 13 10:44:48 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stdio.h>\r\n#include \"MBD_Assignment.h\"            /* Model header file */\r\n\r\n/* Example use case for call to exported function: Runnable_SS1 */\r\nextern void sample_usage_Runnable_SS1(void);\r\nvoid sample_usage_Runnable_SS1(void)\r\n{\r\n  /* Set task inputs here */\r\n\r\n  /* Call to exported function */\r\n  Runnable_SS1();\r\n\r\n  /* Read function outputs here */\r\n}\r\n\r\n/* Example use case for call to exported function: Runnable_SS2 */\r\nextern void sample_usage_Runnable_SS2(void);\r\nvoid sample_usage_Runnable_SS2(void)\r\n{\r\n  /* Set task inputs here */\r\n\r\n  /* Call to exported function */\r\n  Runnable_SS2();\r\n\r\n  /* Read function outputs here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching exported functions to a real-time clock is target specific.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  MBD_Assignment_initialize();\r\n  while (rtmGetErrorStatus(MBD_Assignment_M) == (NULL)) {\r\n    /*  Perform application tasks here. */\r\n  }\r\n\r\n  /* Terminate model */\r\n  MBD_Assignment_terminate();\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"MBD_Assignment.c","type":"source","group":"model","path":"C:\\Users\\prathmeshg\\MATLAB\\Projects\\MDB_Assignment\\MBD_Assignment_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: MBD_Assignment.c\r\n *\r\n * Code generated for Simulink model 'MBD_Assignment'.\r\n *\r\n * Model version                  : 1.28\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Thu Jul 13 10:44:48 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"MBD_Assignment.h\"\r\n#include \"MBD_Assignment_types.h\"\r\n\r\n/* Block signals (default storage) */\r\nB_MBD_Assignment_T MBD_Assignment_B;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU_MBD_Assignment_T MBD_Assignment_U;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY_MBD_Assignment_T MBD_Assignment_Y;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL_MBD_Assignment_T MBD_Assignment_M_;\r\nRT_MODEL_MBD_Assignment_T *const MBD_Assignment_M = &MBD_Assignment_M_;\r\n\r\n/* Model step function for TID1 */\r\nvoid Runnable_SS1(void)                /* Explicit Task: Runnable_SS1 */\r\n{\r\n  /* RootInportFunctionCallGenerator generated from: '<Root>/Runnable_SS1' incorporates:\r\n   *  SubSystem: '<S1>/Function-Call Subsystem1'\r\n   */\r\n  /* Outport: '<Root>/PPort_Enablestarter' incorporates:\r\n   *  SignalConversion generated from: '<S3>/EngineStartEnable'\r\n   */\r\n  MBD_Assignment_Y.PPort_Enablestarter = MBD_Assignment_B.AND;\r\n\r\n  /* Switch: '<S3>/Switch' incorporates:\r\n   *  Inport: '<Root>/RPort_Starter'\r\n   *  Logic: '<S3>/AND'\r\n   *  Outport: '<Root>/PPort_Enablestarter'\r\n   */\r\n  if (MBD_Assignment_Y.PPort_Enablestarter && MBD_Assignment_U.RPort_Starter) {\r\n    /* Outport: '<Root>/PPort_EngineSparkPlugVoltage' incorporates:\r\n     *  Constant: '<S3>/Constant'\r\n     */\r\n    MBD_Assignment_Y.PPort_EngineSparkPlugVoltage = 5.0;\r\n  } else {\r\n    /* Outport: '<Root>/PPort_EngineSparkPlugVoltage' incorporates:\r\n     *  Constant: '<S3>/Constant1'\r\n     */\r\n    MBD_Assignment_Y.PPort_EngineSparkPlugVoltage = 0.0;\r\n  }\r\n\r\n  /* End of Switch: '<S3>/Switch' */\r\n  /* End of Outputs for RootInportFunctionCallGenerator generated from: '<Root>/Runnable_SS1' */\r\n}\r\n\r\n/* Model step function for TID2 */\r\nvoid Runnable_SS2(void)                /* Explicit Task: Runnable_SS2 */\r\n{\r\n  /* RootInportFunctionCallGenerator generated from: '<Root>/Runnable_SS2' incorporates:\r\n   *  SubSystem: '<S1>/Function-Call Subsystem'\r\n   */\r\n  /* Logic: '<S2>/AND' incorporates:\r\n   *  Constant: '<S4>/Constant'\r\n   *  Constant: '<S5>/Constant'\r\n   *  Constant: '<S7>/Constant'\r\n   *  Constant: '<S8>/Constant'\r\n   *  Inport: '<Root>/RPort_ClutchPedalPos'\r\n   *  Inport: '<Root>/RPort_CurrentGear'\r\n   *  Inport: '<Root>/RPort_EngineRPM'\r\n   *  Inport: '<Root>/RPort_Keyswitch'\r\n   *  Inport: '<Root>/RPort_SideStandPos'\r\n   *  Logic: '<S2>/NOT'\r\n   *  Logic: '<S2>/OR'\r\n   *  RelationalOperator: '<S4>/Compare'\r\n   *  RelationalOperator: '<S5>/Relational Operator'\r\n   *  RelationalOperator: '<S7>/Relational Operator'\r\n   *  RelationalOperator: '<S8>/Compare'\r\n   */\r\n  MBD_Assignment_B.AND = (MBD_Assignment_U.RPort_Keyswitch &&\r\n    ((MBD_Assignment_U.RPort_CurrentGear <= neutral) ||\r\n     (MBD_Assignment_U.RPort_ClutchPedalPos != 0)) &&\r\n    (MBD_Assignment_U.RPort_SideStandPos == stowed) &&\r\n    (MBD_Assignment_U.RPort_EngineRPM <= 0U));\r\n\r\n  /* End of Outputs for RootInportFunctionCallGenerator generated from: '<Root>/Runnable_SS2' */\r\n}\r\n\r\n/* Model initialize function */\r\nvoid MBD_Assignment_initialize(void)\r\n{\r\n  /* (no initialization code required) */\r\n}\r\n\r\n/* Model terminate function */\r\nvoid MBD_Assignment_terminate(void)\r\n{\r\n  /* (no terminate code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"MBD_Assignment.h","type":"header","group":"model","path":"C:\\Users\\prathmeshg\\MATLAB\\Projects\\MDB_Assignment\\MBD_Assignment_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: MBD_Assignment.h\r\n *\r\n * Code generated for Simulink model 'MBD_Assignment'.\r\n *\r\n * Model version                  : 1.28\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Thu Jul 13 10:44:48 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_MBD_Assignment_h_\r\n#define RTW_HEADER_MBD_Assignment_h_\r\n#ifndef MBD_Assignment_COMMON_INCLUDES_\r\n#define MBD_Assignment_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* MBD_Assignment_COMMON_INCLUDES_ */\r\n\r\n#include \"MBD_Assignment_types.h\"\r\n#include <stddef.h>\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Block signals (default storage) */\r\ntypedef struct {\r\n  boolean_T AND;                       /* '<S2>/AND' */\r\n} B_MBD_Assignment_T;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  boolean_T RPort_Starter;             /* '<Root>/RPort_Starter' */\r\n  boolean_T RPort_Keyswitch;           /* '<Root>/RPort_Keyswitch' */\r\n  CurrentGear RPort_CurrentGear;       /* '<Root>/RPort_CurrentGear' */\r\n  int8_T RPort_ClutchPedalPos;         /* '<Root>/RPort_ClutchPedalPos' */\r\n  StandPos RPort_SideStandPos;         /* '<Root>/RPort_SideStandPos' */\r\n  uint32_T RPort_EngineRPM;            /* '<Root>/RPort_EngineRPM' */\r\n} ExtU_MBD_Assignment_T;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real_T PPort_EngineSparkPlugVoltage;\r\n                                     /* '<Root>/PPort_EngineSparkPlugVoltage' */\r\n  boolean_T PPort_Enablestarter;       /* '<Root>/PPort_Enablestarter' */\r\n} ExtY_MBD_Assignment_T;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_MBD_Assignment_T {\r\n  const char_T * volatile errorStatus;\r\n};\r\n\r\n/* Block signals (default storage) */\r\nextern B_MBD_Assignment_T MBD_Assignment_B;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU_MBD_Assignment_T MBD_Assignment_U;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY_MBD_Assignment_T MBD_Assignment_Y;\r\n\r\n/* Model entry point functions */\r\nextern void MBD_Assignment_initialize(void);\r\nextern void MBD_Assignment_terminate(void);\r\n\r\n/* Exported entry point function */\r\nextern void Runnable_SS1(void);\r\n\r\n/* Exported entry point function */\r\nextern void Runnable_SS2(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL_MBD_Assignment_T *const MBD_Assignment_M;\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'MBD_Assignment'\r\n * '<S1>'   : 'MBD_Assignment/Subsystem'\r\n * '<S2>'   : 'MBD_Assignment/Subsystem/Function-Call Subsystem'\r\n * '<S3>'   : 'MBD_Assignment/Subsystem/Function-Call Subsystem1'\r\n * '<S4>'   : 'MBD_Assignment/Subsystem/Function-Call Subsystem/Compare To Constant'\r\n * '<S5>'   : 'MBD_Assignment/Subsystem/Function-Call Subsystem/Subsystem'\r\n * '<S6>'   : 'MBD_Assignment/Subsystem/Function-Call Subsystem/Subsystem1'\r\n * '<S7>'   : 'MBD_Assignment/Subsystem/Function-Call Subsystem/Subsystem2'\r\n * '<S8>'   : 'MBD_Assignment/Subsystem/Function-Call Subsystem/Subsystem1/Compare To Constant'\r\n */\r\n#endif                                 /* RTW_HEADER_MBD_Assignment_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"MBD_Assignment_private.h","type":"header","group":"model","path":"C:\\Users\\prathmeshg\\MATLAB\\Projects\\MDB_Assignment\\MBD_Assignment_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: MBD_Assignment_private.h\r\n *\r\n * Code generated for Simulink model 'MBD_Assignment'.\r\n *\r\n * Model version                  : 1.28\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Thu Jul 13 10:44:48 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_MBD_Assignment_private_h_\r\n#define RTW_HEADER_MBD_Assignment_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"MBD_Assignment_types.h\"\r\n#endif                                /* RTW_HEADER_MBD_Assignment_private_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"MBD_Assignment_types.h","type":"header","group":"model","path":"C:\\Users\\prathmeshg\\MATLAB\\Projects\\MDB_Assignment\\MBD_Assignment_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: MBD_Assignment_types.h\r\n *\r\n * Code generated for Simulink model 'MBD_Assignment'.\r\n *\r\n * Model version                  : 1.28\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Thu Jul 13 10:44:48 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_MBD_Assignment_types_h_\r\n#define RTW_HEADER_MBD_Assignment_types_h_\r\n#include \"rtwtypes.h\"\r\n#ifndef DEFINED_TYPEDEF_FOR_CurrentGear_\r\n#define DEFINED_TYPEDEF_FOR_CurrentGear_\r\n\r\ntypedef enum {\r\n  neutral = 0,                         /* Default value */\r\n  first,\r\n  second,\r\n  third,\r\n  fourth,\r\n  fifth,\r\n  sixth\r\n} CurrentGear;\r\n\r\n#endif\r\n\r\n#ifndef DEFINED_TYPEDEF_FOR_StandPos_\r\n#define DEFINED_TYPEDEF_FOR_StandPos_\r\n\r\ntypedef enum {\r\n  stowed = 0,                          /* Default value */\r\n  unstowed\r\n} StandPos;\r\n\r\n#endif\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_MBD_Assignment_T RT_MODEL_MBD_Assignment_T;\r\n\r\n#endif                                 /* RTW_HEADER_MBD_Assignment_types_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\prathmeshg\\MATLAB\\Projects\\MDB_Assignment\\MBD_Assignment_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'MBD_Assignment'.\r\n *\r\n * Model version                  : 1.28\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Thu Jul 13 10:44:48 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: Intel->x86-64 (Windows64)\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32\r\n *                       native word size:  64\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T.                        *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*===========================================================================*\r\n * Complex number type definitions                                           *\r\n *===========================================================================*/\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":false,"showJustificationLinks":false,"showProfilingInfo":false,"showTaskSummary":false}};